
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                               proc.h
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                                    Forrest Yu, 2005
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/


typedef struct s_stackframe {	/* proc_ptr points here				↑ Low			*/
	u32	gs;		/* ┓						│			*/
	u32	fs;		/* ┃						│			*/
	u32	es;		/* ┃						│			*/
	u32	ds;		/* ┃						│			*/
	u32	edi;		/* ┃						│			*/
	u32	esi;		/* ┣ pushed by save()				│			*/
	u32	ebp;		/* ┃						│			*/
	u32	kernel_esp;	/* <- 'popad' will ignore it			│			*/
	u32	ebx;		/* ┃						↑栈从高地址往低地址增长*/		
	u32	edx;		/* ┃						│			*/
	u32	ecx;		/* ┃						│			*/
	u32	eax;		/* ┛						│			*/
	u32	retaddr;	/* return address for assembly code save()	│			*/
	u32	eip;		/*  ┓						│			*/
	u32	cs;		/*  ┃						│			*/
	u32	eflags;		/*  ┣ these are pushed by CPU during interrupt	│			*/
	u32	esp;		/*  ┃						│			*/
	u32	ss;		/*  ┛						┷High			*/
}STACK_FRAME;


typedef struct s_proc {
	STACK_FRAME regs;          /* process registers saved in stack frame */

	u16 ldt_sel;               /* gdt selector giving ldt base and limit */
	DESCRIPTOR ldts[LDT_SIZE]; /* local descriptors for code and data */

        int ticks;                 /* remained ticks */
        int priority;

	u32 pid;                   /* process id passed in from MM */
	char p_name[16];           /* name of the process */
	int sleep_milis;
	int is_ready;
	int p_table_index;
}PROCESS;

typedef struct s_task {
	task_f	initial_eip;
	int	stacksize;
	char	name[32];
}TASK;

#define YELLOW 0x0E
#define RED 0x0C
#define BLUE 0x09
#define GREEN 0x0A
#define GRAY 0x08

#define QUEUE_SIZE 100
#define	BUFFERSIZE 5
typedef struct QUEUE{
	int vals[QUEUE_SIZE];
	int index;
}queue;

typedef struct SEMAPHORE{
	int count;
	queue wait;
}semaphore;
/*about system call*/
PUBLIC	int		sys_sem_p(semaphore *sem);
PUBLIC	int		sys_sem_v(semaphore *sem);
PUBLIC	int		sem_p(semaphore*);
PUBLIC	int		sem_v(semaphore*);

PUBLIC void init_semaphore(semaphore* sem);

/*semaphores of consumer and producer problem*/
/**semaphore mutex;
semaphore *p_mutex;
semaphore sput;
semaphore *p_sput;
semaphore sget;
semaphore *p_sget;**/


/* Number of tasks */
#define NR_TASKS	5

/* stacks of tasks */
#define STACK_SIZE_TESTA	0x8000
#define STACK_SIZE_TESTB	0x8000
#define STACK_SIZE_TESTC	0x8000
#define STACK_SIZE_TESTD	0x8000
#define STACK_SIZE_TESTE	0x8000
#define STACK_SIZE_TOTAL	(STACK_SIZE_TESTA + \
				STACK_SIZE_TESTB + \
				STACK_SIZE_TESTC+\
				STACK_SIZE_TESTD + \
                                STACK_SIZE_TESTE)

